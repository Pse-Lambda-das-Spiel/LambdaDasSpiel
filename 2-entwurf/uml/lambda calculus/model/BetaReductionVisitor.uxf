<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="13.0">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>330</x>
      <y>420</y>
      <w>240</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>BetaReductionVisitor
--
-strategy: ReductionStrategy
-result: LambdaTerm = null
-hasReduced: boolean = false
--
+BetaReductionVisitor(strategy: 
    ReductionStrategy)
+visit(node: LambdaApplication)
+visit(node: LambdaAbstraction)
+visit(node: LambdaVariable)
+getResult(): LambdaTerm</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLInterface</id>
    <coordinates>
      <x>40</x>
      <y>420</y>
      <w>160</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>LambdaTermVisitor&lt;T&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>120</x>
      <y>420</y>
      <w>230</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=-
&lt;&lt;bind&gt;&gt;
T -&gt; LambdaTerm</panel_attributes>
    <additional_attributes>10.0;20.0;210.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>330</x>
      <y>250</y>
      <w>170</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enumeration&gt;&gt;
ReductionStrategy
--
NORMAL_ORDER
APPLICATIVE_ORDER
CALL_BY_NAME
CALL_BY_VALUE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>540</x>
      <y>550</y>
      <w>80</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>10.0;10.0;60.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>600</x>
      <y>640</y>
      <w>700</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>if (!hasReduced &amp;&amp; strategy != CALL_BY_NAME &amp;&amp; strategy != CALL_BY_VALUE) {
    node.setInside(node.getInside().accept(this));
}
result = node;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>540</x>
      <y>360</y>
      <w>80</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>10.0;180.0;60.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>600</x>
      <y>330</y>
      <w>740</w>
      <h>300</h>
    </coordinates>
    <panel_attributes>if (hasReduced) {
    result = node;
} else {
    if (node.getFirst().isAbstraction()) {
        LambdaAbstraction abstraction = ((LambdaAbstraction) node.getFirst());
        switch (strategy) {
            case NORMAL_ORDER: {
                result = abstraction.getInside().accept(new ApplicationVisitor(abstraction.getColor(), node.getSecond()));
                break;
            }
            // ...
        }
        hasReduced = true;
    } else {
        node.setFirst(node.getFirst().accept(this));
        node.setSecond(node.getSecond().accept(this));
    }
}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>600</x>
      <y>720</y>
      <w>110</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>result = node;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>520</x>
      <y>560</y>
      <w>100</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>10.0;10.0;80.0;170.0</additional_attributes>
  </element>
</diagram>
