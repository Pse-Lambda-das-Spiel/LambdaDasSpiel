<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="13.0">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>730</x>
      <y>250</y>
      <w>320</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>checkAlphaConversion(node);
node.setFirst(node.getFirst().accept(this));
node.setSecond(node.getSecond().accept(this));
result = node;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>320</x>
      <y>240</y>
      <w>360</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>ApplicationVisitor
--
-color: Color
-replacing: LambdaTerm
-result: LambdaTerm = null
-hasCheckedAlphaConversion: boolean = false
--
+ApplicationVisitor(color: Color, replacing: LambdaTerm)
+visit(node: LambdaApplication)
+visit(node: LambdaAbstraction)
+visit(node: LambdaVariable)
+getResult(): LambdaTerm
-checkAlphaConversion(node: LambdaTerm)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>530</x>
      <y>300</y>
      <w>220</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>10.0;60.0;200.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>510</x>
      <y>380</y>
      <w>240</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>10.0;10.0;220.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>730</x>
      <y>420</y>
      <w>550</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>checkAlphaConversion(node);
result = (color.equals(node.getColor())) ? replacing.accept(new CopyVisitor()) : node;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>730</x>
      <y>340</y>
      <w>320</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>assert(!color.equals(node.getColor()));
checkAlphaConversion(node);
node.setInside(node.getInside().accept(this));
result = node;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLInterface</id>
    <coordinates>
      <x>110</x>
      <y>280</y>
      <w>160</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>LambdaTermVisitor&lt;T&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>190</x>
      <y>280</y>
      <w>150</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=-
&lt;&lt;bind&gt;&gt;
T -&gt; LambdaTerm</panel_attributes>
    <additional_attributes>10.0;20.0;130.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>610</x>
      <y>420</y>
      <w>140</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>10.0;10.0;120.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>730</x>
      <y>480</y>
      <w>650</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>if (!hasCheckedAlphaConversion) {
    hasCheckedAlphaConversion = true;
    Set&lt;Color&gt; intersection = node.accept(new ColorCollectionVisitor());
    intersection.retainAll(replacing.accept(new ColorCollectionVisitor()));
    for (Color color : intersection) {
        if (!color.equals(this.color) &amp;&amp; !replacing.getParent().accept(new IsColorBoundVisitor(color))) {
            replacing.accept(new AlphaConversionVisitor(color, GENERATE NEW COLOR));
        }
    }
    replacing.accept(new RemoveTermVisitor());
}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>320</x>
      <y>590</y>
      <w>310</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>ColorCollectionVisitor
--
-result: Set&lt;Color&gt;
--
+visit(node: LambdaApplication)
+visit(node: LambdaAbstraction)
+visit(node: LambdaVariable)
+getResult(): Set&lt;Color&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>530</x>
      <y>650</y>
      <w>130</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>10.0;10.0;110.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>640</x>
      <y>680</y>
      <w>210</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>colors.add(node.getColor());
node.getInside().accept(this);</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>180</x>
      <y>580</y>
      <w>160</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=-
&lt;&lt;bind&gt;&gt;
T -&gt; Set&lt;Color&gt;</panel_attributes>
    <additional_attributes>10.0;20.0;140.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLInterface</id>
    <coordinates>
      <x>100</x>
      <y>580</y>
      <w>160</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>LambdaTermVisitor&lt;T&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>430</x>
      <y>430</y>
      <w>70</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;uses&gt;&gt;</panel_attributes>
    <additional_attributes>30.0;160.0;30.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>530</x>
      <y>350</y>
      <w>220</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>10.0;30.0;200.0;10.0</additional_attributes>
  </element>
</diagram>
