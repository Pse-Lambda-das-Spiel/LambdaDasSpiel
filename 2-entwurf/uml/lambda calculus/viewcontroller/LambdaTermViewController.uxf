<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="13.0">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>470</x>
      <y>680</y>
      <w>330</w>
      <h>330</h>
    </coordinates>
    <panel_attributes>/LambdaNodeViewController/
--
-linkedTerm: LambdaTerm
-view: LambdaTermViewController
-parent: LambdaNodeViewController
-children: List&lt;LambdaNodeViewController&gt;
--
+LambdaNodeViewController(linkedTerm: LambdaTerm,
    parent: LambdaNodeViewController, 
    view: LambdaTermViewController)
+getParent(): LambdaNodeViewController
+isRoot(): boolean
+getLinkedTerm(): LambdaTerm

+updateWidth()
+updatePosition(x: float, y: float)
/+getMinWidth(): float/

+insertChild(child: LambdaNodeViewController,
    rightSibling: LambdaTerm)
+removeChild(child: LambdaNodeViewController)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>470</x>
      <y>230</y>
      <w>390</w>
      <h>370</h>
    </coordinates>
    <panel_attributes>LambdaTermViewController
--
-inputListener: scene2d.ClickListener
-editable: boolean
-selection: LambdaTermViewController = null
-term: LambdaRoot
--
+LambdaTermViewController(root: LambdaRoot, editable: boolean)

+replaceTerm(old: LambdaTerm, new: LambdaTerm)
+setColor(term: LambdaTerm, color: Color)

#getNodeView(term: LambdaTerm): LambdaNodeViewController
#hasNodeView(term: LambdaTerm): boolean
#addNodeView(nodeView: LambdaNodeViewController)
#removeNodeView(nodeView: LambdaNodeViewController)

+isEditable(): boolean
+setSelection(term: LambdaRoot)
+getSelection(): LambdaTermViewController
-getParentFromPosition(x: float, y: float): 
    LambdaNodeViewController
-getChildIndexFromPosition(x: float, y: float): int
-getGapRectangle(x: float, y:float): gdx.math.Rectangle</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>190</x>
      <y>480</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>scene2d.Group</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>280</x>
      <y>770</y>
      <w>210</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;190.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>190</x>
      <y>770</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>scene2d.Actor</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>280</x>
      <y>480</y>
      <w>210</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;190.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>510</x>
      <y>600</y>
      <w>130</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=[term: LambdaTerm]-&gt;
m2=0..1
m1=1
</panel_attributes>
    <additional_attributes>60.0;10.0;60.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLInterface</id>
    <coordinates>
      <x>290</x>
      <y>390</y>
      <w>160</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>LambdaTermObserver</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>370</x>
      <y>400</y>
      <w>120</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>100.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>810</x>
      <y>360</y>
      <w>110</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>900</x>
      <y>320</y>
      <w>420</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>if (new != null) { // Add new node
    new.getParent().accept(new ViewInsertionVisitor(new, view));
}
if (old != null) { // Remove node
    old.accept(new ViewRemovalVisitor(view));
}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>650</x>
      <y>610</y>
      <w>170</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>Mapped by identity, not equality.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>610</x>
      <y>610</y>
      <w>60</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>40.0;20.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>150</x>
      <y>1000</y>
      <w>360</w>
      <h>310</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;290.0;10.0;160.0;340.0;160.0;340.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>1290</y>
      <w>340</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>LambdaAbstractionViewController
--
-color: Color
--
+LambdaAbstractionView(term: LambdaAbstraction,
    parent: LambdaNodeView,
    view: LambdaTermView)
+draw(batch: Batch, alpha: float)
+getMinWidth(): float</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>350</x>
      <y>1290</y>
      <w>330</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>LambdaParanthesisViewController
--
--
+LambdaApplicationView(term: LambdaApplication, 
    parent: LambdaNodeView,
    view: LambdaTermView)
+draw(batch: Batch, alpha: float)
+getMinWidth(): float</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>570</x>
      <y>740</y>
      <w>290</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>10.0;150.0;270.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>840</x>
      <y>600</y>
      <w>460</w>
      <h>300</h>
    </coordinates>
    <panel_attributes>float width = max((children.size() - 1) * HORIZONTAL_SPACING, 0);
for (LambdaNodeView child : children) {
    width += child.getWidth();
}
setWidth(max(width, getMinWidth()));
if (!isRoot()) {
    parent.updateWidth();
} else {
    updatePosition(0.0f, 0.0f);
}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>540</x>
      <y>1000</y>
      <w>30</w>
      <h>310</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;290.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>700</x>
      <y>1290</y>
      <w>330</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>LambdaVariableViewController
--
-color: Color
--
+LambdaVariableView(term: LambdaVariable,
    parent: LambdaNodeView,
    view: LambdaTermView)
+draw(batch: Batch, alpha: float)
+getMinWidth(): float</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>730</x>
      <y>1000</y>
      <w>30</w>
      <h>310</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;290.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>190</x>
      <y>1350</y>
      <w>160</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>10.0;10.0;140.0;160.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>840</x>
      <y>1030</y>
      <w>460</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>if (rightSibling == null) { // Insert at end of list
    children.add(child);
} else { // Insert before rightSibling
    for (int i = 0; i &lt; children.size(); i++) {
        if (children.get(i).getTerm() == rightSibling) {
            children.add(i, child);
            break;
        }
    }
}
view.addNodeView(child);
updateWidth();
 // Block until animation is complete</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>830</x>
      <y>430</y>
      <w>90</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>900</x>
      <y>460</y>
      <w>320</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>nodeViewMap.put(term, nodeView);
addActor(nodeView);</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>840</x>
      <y>910</y>
      <w>460</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>setPosition(x, y);
y += getHeight() + VERTICAL_SPACING;
for (LambdaNodeViewController child : children) {
    child.updatePosition(x, y);
    x += child.getWidth() + HORIZONTAL_SPACING;
}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>680</x>
      <y>900</y>
      <w>180</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>10.0;10.0;160.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>10</x>
      <y>1050</y>
      <w>460</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>children.remove(child);
view.removeNodeView(child.getTerm(), child);
updateWidth(); // ?
 // Block until animation is complete</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>400</x>
      <y>980</y>
      <w>360</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>340.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>840</x>
      <y>450</y>
      <w>80</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>10.0;10.0;60.0;100.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>900</x>
      <y>530</y>
      <w>320</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>nodeViewMap.remove(term);
removeActor(nodeView);</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>840</x>
      <y>170</y>
      <w>80</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>10.0;160.0;60.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>900</x>
      <y>0</y>
      <w>420</w>
      <h>310</h>
    </coordinates>
    <panel_attributes>...
root.addObserver(this);

 // Root node view
addNodeView(new LambdaNodeViewController(root, null, this){
    float getMinWidth() {return 0.0f;}
});

 // Traverse lambda tree to create all node views
root.accept(new ViewInsertionVisitor(root.getChild(), this));
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>710</x>
      <y>950</y>
      <w>170</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>10.0;10.0;150.0;160.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>160</x>
      <y>1510</y>
      <w>460</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>if (view.isEditable()) {
    // Add event listener to split this node from the lambda term tree. Call view.setSelection(splitTerm);
}
????????</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>390</x>
      <y>790</y>
      <w>360</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>340.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>0</x>
      <y>860</y>
      <w>460</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>addListener(new InputListener(){
    // events control model via linkedTerm if view.isEditable()
    // optionally add view.selection (not editable) and remove 
    // selected term from tree
});</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
