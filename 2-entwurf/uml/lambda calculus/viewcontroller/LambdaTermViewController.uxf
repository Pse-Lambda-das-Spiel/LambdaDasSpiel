<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="13.0">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>470</x>
      <y>640</y>
      <w>330</w>
      <h>330</h>
    </coordinates>
    <panel_attributes>/LambdaNodeViewController/
--
-linkedTerm: LambdaTerm
-view: LambdaTermViewController
-parent: LambdaNodeViewController
-children: List&lt;LambdaNodeViewController&gt;
--
+LambdaNodeView(linkedTerm: LambdaTerm,
    parent: LambdaNodeViewController, 
    view: LambdaTermViewController)
+getParent(): LambdaNodeViewController
+isRoot(): boolean
+getLinkedTerm(): LambdaTerm

+updateWidth()
+updatePosition(x: float, y: float)
/+getMinWidth(): float/

+insertChild(child: LambdaNodeView,
    rightSibling: LambdaTerm)
+removeChild(child: LambdaNodeView)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>470</x>
      <y>220</y>
      <w>390</w>
      <h>330</h>
    </coordinates>
    <panel_attributes>LambdaTermViewController
--
-inputListener: scene2d.ClickListener
-editable: boolean
-selection: LambdaTermNodeViewController = null
--
+LambdaTermView(root: LambdaRoot, editable: boolean)

+replaceTerm(old: LambdaTerm, new: LambdaTerm)
+setColor(term: LambdaTerm, color: Color)

#getActor(term: LambdaTerm): LambdaNodeViewController
#hasNodeView(term: LambdaTerm): boolean
#addNodeView(term: LamdbdaTerm,
    nodeView: LambdaNodeViewController)
#removeNodeView(term: LambdaTerm,
    nodeView: LambdaNodeViewController)

+isEditable(): boolean

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>190</x>
      <y>440</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>scene2d.Group</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>280</x>
      <y>730</y>
      <w>210</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;190.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>190</x>
      <y>730</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>scene2d.Actor</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>280</x>
      <y>440</y>
      <w>210</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;190.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>510</x>
      <y>550</y>
      <w>130</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=[term: LambdaTerm]-&gt;
m2=0..1
m1=1
</panel_attributes>
    <additional_attributes>60.0;10.0;60.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLInterface</id>
    <coordinates>
      <x>290</x>
      <y>350</y>
      <w>160</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>LambdaTermObserver</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>370</x>
      <y>360</y>
      <w>120</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>100.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>810</x>
      <y>330</y>
      <w>110</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;30.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>900</x>
      <y>280</y>
      <w>420</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>if (old == null &amp;&amp; new != null) { // Add new node
    new.getParent().accept(new ViewInsertionVisitor(new, view));
} else if (old != null &amp;&amp; new == null) { // Remove node
    old.accept(new ViewRemovalVisitor(view));
} else {

}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>640</x>
      <y>560</y>
      <w>170</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>Mapped by identity, not equality.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>610</x>
      <y>550</y>
      <w>50</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>30.0;30.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>150</x>
      <y>960</y>
      <w>360</w>
      <h>310</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;290.0;10.0;160.0;340.0;160.0;340.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>1250</y>
      <w>340</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>LambdaAbstractionViewController
--
-color: Color
--
+LambdaAbstractionView(term: LambdaAbstraction,
    parent: LambdaNodeView,
    view: LambdaTermView)
+draw(batch: Batch, alpha: float)
+getMinWidth(): float</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>350</x>
      <y>1250</y>
      <w>330</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>LambdaParanthesisViewController
--
--
+LambdaApplicationView(term: LambdaApplication, 
    parent: LambdaNodeView,
    view: LambdaTermView)
+draw(batch: Batch, alpha: float)
+getMinWidth(): float</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>570</x>
      <y>700</y>
      <w>290</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>10.0;150.0;270.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>840</x>
      <y>560</y>
      <w>460</w>
      <h>300</h>
    </coordinates>
    <panel_attributes>float width = max((children.size() - 1) * HORIZONTAL_SPACING, 0);
for (LambdaNodeView child : children) {
    width += child.getWidth();
}
setWidth(max(width, getMinWidth()));
if (!isRoot()) {
    parent.updateWidth();
} else {
    updatePosition(0.0f, 0.0f);
}

addListener(new InputListener(){
    // events control model via linkedTerm if view.isEditable()
    // optionally add view.selection (not editable) and remove 
    // selected term from tree
});</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>540</x>
      <y>960</y>
      <w>30</w>
      <h>310</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;290.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>700</x>
      <y>1250</y>
      <w>330</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>LambdaVariableViewController
--
-color: Color
--
+LambdaVariableView(term: LambdaVariable,
    parent: LambdaNodeView,
    view: LambdaTermView)
+draw(batch: Batch, alpha: float)
+getMinWidth(): float</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>730</x>
      <y>960</y>
      <w>30</w>
      <h>310</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;290.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>710</x>
      <y>910</y>
      <w>150</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>10.0;10.0;130.0;140.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>840</x>
      <y>990</y>
      <w>460</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>if (rightSibling == null) { // Insert at end of list
    children.add(child);
} else { // Insert before rightSibling
    for (int i = 0; i &lt; children.size(); i++) {
        if (children.get(i).getTerm() == rightSibling) {
            children.add(i, child);
            break;
        }
    }
}
view.addNodeView(child.getTerm(), child);
updateWidth();
 // Block until animation is complete</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>740</x>
      <y>420</y>
      <w>180</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>10.0;10.0;160.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>900</x>
      <y>420</y>
      <w>320</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>nodeViewMap.put(term, nodeView);
addActor(nodeView);
nodeView.addListener(inputListener);</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>840</x>
      <y>870</y>
      <w>460</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>setPosition(x, y);
y += getHeight() + VERTICAL_SPACING;
for (LambdaNodeViewController child : children) {
    child.updatePosition(x, y);
    x += child.getWidth() + HORIZONTAL_SPACING;
}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>680</x>
      <y>860</y>
      <w>180</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>10.0;10.0;160.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>10</x>
      <y>1010</y>
      <w>460</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>children.remove(child);
view.removeNodeView(child.getTerm(), child);
updateWidth(); // ?
 // Block until animation is complete</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>400</x>
      <y>940</y>
      <w>360</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>340.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>740</x>
      <y>450</y>
      <w>180</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>10.0;10.0;160.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>900</x>
      <y>490</y>
      <w>320</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>nodeViewMap.remove(term);
removeActor(nodeView);
nodeView.removeListener(inputListener);</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>840</x>
      <y>130</y>
      <w>80</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>lt=()-</panel_attributes>
    <additional_attributes>10.0;180.0;60.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>900</x>
      <y>0</y>
      <w>420</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>...
root.addObserver(this);

 // Root node view
addNodeView(root, new LambdaNodeView(root, null, this){
    float getMinWidth() {return 0.0f;}
});

 // Traverse lambda tree to create all node views
root.accept(new ViewInsertionVisitor(root.getChild(), this));

inputListener = new ???Listener(){
    // 
};</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
